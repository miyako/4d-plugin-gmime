/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.h
 #	source generated by 4D Plugin Wizard
 #	Project : MIME
 #	author : miyako
 #	2017/06/19
 #
 # --------------------------------------------------------------------------------*/

#if defined(WIN64)
#define ssize_t LONG_PTR
#else
#define ssize_t int
#endif

#include "gmime/gmime.h"
#include "libjson.h"
#include "libjson_methods.h"

#include <mutex>

#if defined(_WIN32)
#define snprintf _snprintf
#define vsnprintf _vsnprintf
#define strcasecmp _stricmp
#define strncasecmp _strnicmp
extern "C" BOOL glib_DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
extern "C" BOOL gio_DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
extern "C" BOOL gobject_DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
#endif

#pragma mark -

void MIME_PARSE_MESSAGE(PA_PluginParameters params);
void MIME_Create_message(PA_PluginParameters params);

#pragma mark -

void processTopLevel(GMimeObject *parent, GMimeObject *part, gpointer user_data);
void processNextLevel(GMimeObject *parent, GMimeObject *part, gpointer user_data);

void getHeaders(GMimeObject *part, const wchar_t *label, JSONNODE *json_message);
void getAddress(InternetAddressList *list, const wchar_t *label, JSONNODE *json_message);

void returnBlob(sLONG_PTR *pResult, PackagePtr pParams, void *blob, PA_long32 len);
void filter_double_header(GMimeObject *message_mime, const char *name, BOOL with_new_line = FALSE);

void add_mailboxes(GMimeMessage *message, JSONNODE *message_node, const wchar_t *key, GMimeAddressType type);
void add_headers(GMimeObject *message_mime, JSONNODE *message_node);
void add_date(GMimeMessage *message, JSONNODE *message_node);
void add_parts(GMimeObject *message_mime, JSONNODE *message_node, PA_Variable *data_array);

#pragma mark -

//TODO: clean this

void wconv(const char *value, std::wstring &u32);
JSONNODE *json_parse_text_param(C_TEXT &t);
void json_set_text_param(JSONNODE *n, C_TEXT &t);
void json_set_object(JSONNODE *n, const wchar_t *name, JSONNODE *o);
BOOL json_get_string(JSONNODE *json, CUTF8String &value);
BOOL json_get_string(JSONNODE *json, const wchar_t *name, CUTF8String &value);
void json_set_text(JSONNODE *n, const wchar_t *name, char *value, BOOL optional = FALSE, BOOL release = FALSE);
void json_set_date(JSONNODE *n, GDateTime *dt, const wchar_t *date, const wchar_t *time, const char *fmt);
void json_set_number(JSONNODE *n, const wchar_t *name, json_int_t value);
